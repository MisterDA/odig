
(* Odig toplevel bootstrap. *)

let __odig_deps =
  (* It would be nice to be able to expunge this from the environment
     but we need to share it between two phrases *)
  let all = [ `Utop; `OCaml ] in
  (* (pkg, cmas, relevant toplevels). *)
  [ "ocaml", ["unix.cma"], [ `OCaml ];

    (* opam-format deps *)
    "opam-file-format", ["opam-file-format.cma"], all;
    "uutf", ["uutf.cma"], all;
    "jsonm", ["jsonm.cma"], all;
    "re", ["re.cma"; "re_emacs.cma"; "re_str.cma"], all;
    "ocamlgraph", ["graph.cma"], all;
    "ocaml", ["bigarray.cma"], all;
    "opam-core", ["opam-core.cma"], all;

    (* odig deps *)
    "opam-format", ["opam-format.cma"], all;
    "asetmap", ["asetmap.cma"], all;
    "rresult", ["rresult.cma"], all;
    "astring", ["astring.cma"], all;
    "fpath", ["fpath.cma"], all;
    "fmt", ["fmt.cma"; "fmt_tty.cma"], all;
    "logs", ["logs.cma"; "logs_fmt.cma"], all;
    "bos", ["bos.cma"; "bos_setup.cma"], all;
    "mtime/os", ["mtime.cma"], all;
    "ocaml", ["ocamlcommon.cma"], all;

    "odig", ["odig.cma"], all; ]
;;

let () =
  (* First we need this phrase to see Toploop's API which allows us to
     detect utop. N.B. in ocaml we only have Topdirs and Toploop the
     rest is expunged. *)
  Topdirs.dir_directory "+compiler-libs"
;;

let () =
  (* This phrase allows us to see Odig. *)
  let load_dep which (pkg, cmas, tops) = match List.mem which tops with
  | false -> ()
  | true ->
      if pkg <> "ocaml" then Topdirs.dir_directory ("%%LIBDIR%%/" ^ pkg);
      List.iter (Topdirs.dir_load Format.err_formatter) cmas
  in
  let which = match Hashtbl.mem Toploop.directive_table "utop_help" with
  | true -> `Utop
  | false -> `OCaml
  in
  List.iter (load_dep which) __odig_deps
;;

let () =
  (* We can now announce Odig and TODO make it aware of what we already loaded
     in the toplevel. *)
  Odig.Private.Top.announce ()
;;
